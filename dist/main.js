(()=>{var e={903:(e,t,r)=>{const a=r(867);e.exports=()=>{let e=!0,t=[],r=a(5),n=a(5),l=a(3),o=a(3),i=a(2);const s=e=>{switch(e){case"Carrier":return r;case"Battleship":return n;case"Destroyer":return l;case"Submarine":return o;case"PatrolBoat":return i;default:return"Error!"}};return{onStart:()=>{if(!0!==e)return"Cannot run it twice bud";{let e=100;for(let r=0;e>r;r++)t.push("")}return e=!1,t},placeShip:(e,r,a)=>(s(a),((e,r,a)=>{let n=1;do{t[e]=`${a} ${n}`,e++,n++,r--}while(0<r)})(e,r,a),t),receiveAttack:(e,r,a)=>{let n,l=t[e];if(""!==l){if("npc"===r){console.log(l);let e=l.split(" ");console.log(e[0]);let t=s(e[0]);console.log(t.isSunk()),t.hit(e[1])}else{let e=s(a);e.hit(r),console.log(e.isSunk(),e.getArray())}t[e]=`${l} - hit`,n="hit"}else t[e]="hit",n="miss";return n},allSunk:()=>{let e=[`${r.isSunk()}`,`${n.isSunk()}`,`${l.isSunk()}`,`${o.isSunk()}`,`${i.isSunk()}`];return console.log(r.isSunk()),console.log(n.isSunk()),e},getGameboardSize:()=>t.length,getGameboardArray:()=>t}}},564:(e,t,r)=>{const a=r(903);e.exports=e=>{let t,r=a();t=void 0===e;const n=e=>t=e,l=e=>{let t=Math.floor(Math.random()*(e.getGameboardSize()-0+1)+0);return"hit"===e.getGameboardArray()[t]?"miss":t};return{onRun:()=>{r.onStart()},attack:(r,a,o,i)=>{let s;if(!0===t){let t=r.getGameboard();if(!0===e){let e=l(t);"miss"===e?(e=l(t),s=t.receiveAttack(e,"npc")):s=t.receiveAttack(e,"npc"),console.log(t.getGameboardArray()[e])}else s=t.receiveAttack(a,o,i);r.setTurn(!0),n(!1)}else s="notTurn";return s},getGameboard:()=>r,setTurn:n}}},867:e=>{e.exports=e=>{array=[];const t=e=>array[e]="hit";return{length:e,hit:r=>(0===array.length?((()=>{for(let t=0;e>t;t++)array.push("")})(),t(r)):t(r),array),isSunk:()=>{for(let t=e-1;array.length>=t;t--){if(0==t)return"hit"===array[t];if("hit"!==array[t])return!1}console.log(array)},getArray:()=>array}}}},t={};function r(a){var n=t[a];if(void 0!==n)return n.exports;var l=t[a]={exports:{}};return e[a](l,l.exports,r),l.exports}(()=>{"use strict";let e,t,a,n,l=!1;function o(e){document.querySelector(".display-text").textContent=e}function i(r,i){const c=document.querySelector(".game"),u=document.createElement("div");u.className="gameboard",u.dataset.gameboard=`${r}`;for(let r=0;i.getGameboard().getGameboardSize()>r;r++){const i=document.createElement("div");i.dataset.cellId=r,i.className="cell",u.append(i);let c=!1;i.addEventListener("click",(r=>{if(!1===c&&!1===l){const d=document.createElement("p");let h=r.path[1];"cell"===r.path[0].className?(h=void 0,d.textContent="X",i.append(d)):r.target.textContent=r.target.getAttribute("data-ship")[0],o("miss"===(p=s(u.getAttribute("data-gameboard"),r.path[0],h))?"You missed!":"hit"===p?"It's a hit!":"It's not your turn yet!"),c=!0,a=e.getGameboard().allSunk(),n=t.getGameboard().allSunk(),console.log(a,n),o("Waiting for NPC's move."),l=!0,t.attack(e),o("Player, awaiting orders!"),l=!1,setTimeout((()=>{}),500)}else o(!0===l?"Please wait until NPC's order!":"You can't hit the same cell twice!");var p}))}c.append(u)}function s(r,a,n){let l,o,i;if(void 0===n?l=a.getAttribute("data-cell-id"):(i=a.getAttribute("data-ship"),l=n.getAttribute("data-cell-id"),o=a.getAttribute("data-ship-cell")),"npc"===r)return e.attack(t,l,o,i)}function c(e,t,r,a){const n=document.querySelector(`[data-gameboard="${e}"]`);let l=0;for(let i=0;100>i;i++){let s=r+a;if(1==((o=i)-r)*(o-(s-1))<=0){let r=n.children;for(let a=0;r.length>a;a++){let n=r[a].getAttribute("data-cell-id");if(n!=i){if(n>i)break}else{const n=document.createElement("p");"npc"===e||(n.textContent=`${t[0]}`),n.dataset.ship=t,n.dataset.shipCell=l,r[a].append(n),l+=1}}}if(100===i||i>s)break}var o}const u=r(564);let p,d,h,g;function m(e){return"player"===e?p:d}p=u(),d=u(!0),p.onRun(),d.onRun(),h=p.getGameboard(),g=d.getGameboard(),e=m("player"),t=m("npc"),i("player",p),i("npc",d),g.placeShip(1,5,"Carrier"),c("npc","Carrier",1,5),g.placeShip(10,5,"Battleship"),c("npc","Battleship",10,5),g.placeShip(16,3,"Destroyer"),c("npc","Destroyer",16,3),g.placeShip(27,3,"Submarine"),c("npc","Submarine",26,3),g.placeShip(50,2,"PatrolBoat"),c("npc","PatrolBoat",50,2),h.placeShip(3,5,"Carrier"),c("player","Carrier",3,5),h.placeShip(15,5,"Battleship"),c("player","Battleship",14,5),h.placeShip(26,3,"Destroyer"),c("player","Destroyer",25,3),h.placeShip(50,3,"Submarine"),c("player","Submarine",50,3),h.placeShip(70,2,"PatrolBoat"),c("player","PatrolBoat",70,2),o("Player, awaiting orders!")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,